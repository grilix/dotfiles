#!/usr/bin/env bash

user-name() {
  GIT_NAME=$(git config --get user.name)
  if [ -n "$GIT_NAME" ]; then
    echo "$GIT_NAME"
    exit
  fi

  getent passwd $UID | \
    awk -F: '{print $5}' | \
    awk -F, '{print $1}'
}

get-key() { EMAIL="$1";
  gpg --list-options show-only-fpr-mbox --list-secret-keys 2>/dev/null |
    grep "$EMAIL" |
    awk '{print $1}'
}

check-err() {
  if [ $? != 0 ]; then
    # El resultado de esto es medio bajón, lo mejor
    # sería tener un log, pero por ahora es suficiente."
    echo "$1" >&2
    exit -2
  fi
}

print-status() {
  NAME=$(git config --get user.name)
  EMAIL=$(git config --get user.email)
  FPR=$(git config --get user.signingkey)
  SIGN=$(git config --get commit.gpgsign)

  if [ "$SIGN" != "true" ]; then
    echo "[!] La firma automática no está activada"
  fi

  echo "Identidad: $NAME <$EMAIL>"
  echo "    Firma: $FPR"
}

print-usage() {
cat <<USAGE
Opciones:
  -h Muestra esta información
  -p Muestra la identidad en uso

Cambiar la identidad en uso:
  $(basename $0) $USER@`hostname -f`
USAGE
}

git config --local -l >/dev/null 2>&1
check-err "Esta herramienta debe ser usada desde un repositorio git."

KEY_DURATION="1y"
EMAIL="$1"
# Esto sube la clave pública a un servidor por conveniencia, cámbialo
# si quieres evitarlo y la clave pública se escribirá en la salida estándar.
UPLOAD_PKEY="y"

while getopts ":hp" arg; do
  case $arg in
    h)
      print-usage
      exit
      ;;
    p)
      print-status
      exit
      ;;
    ?)
      echo "Opción inválida: -$OPTARG" >&2
      print-usage >&2
      exit -1
      ;;
  esac
done

if [ -z "$EMAIL" ]; then
  echo "No se ha provisto una dirección de email." >&2
  print-usage >&2
  exit -1
fi

if [ -z "$NAME" ]; then
  NAME=$(user-name)
  if [ -z "$NAME" ]; then
cat >&2 <<NAME
No hemos podido obtener tu nombre, $USER.

Tienes dos opciones:
  1. Actualizar la configuración de git:
    git config --global user.name "Mi Nombre"

  2. Asociar un nombre a tu cuenta de usuario:
    sudo chfn -f "Mi Nombre" \$USER
NAME
    exit -1
  fi
fi

FPR=$(get-key "$EMAIL" 2>/dev/null)

if [ -z "$FPR" ]; then
  echo "No se encontraron claves para la dirección de email $EMAIL, crearemos una nueva."

  RES=$(gpg --batch --passphrase '' \
      --quick-generate-key "$NAME <$EMAIL>" rsa4096 cert $KEY_DURATION 2>&1)
  check-err "$RES"
  FPR=$(get-key "$EMAIL")
  check-err "No se pudo obtener la clave para $EMAIL"

  RES=$(gpg --batch --passphrase '' \
      --quick-add-key $FPR rsa4096 sign $KEY_DURATION 2>&1)
  check-err "$RES"
  RES=$(gpg --batch --passphrase '' \
      --quick-add-key $FPR rsa4096 encrypt $KEY_DURATION 2>&1)
  check-err "$RES"

  if [ "$UPLOAD_PKEY" == "y" ]; then
    echo ""
    echo -n "Exportando clave pública: "
    gpg --export -a "$EMAIL" | curl -F 'sprunge=<-' 'http://sprunge.us/'
  else
    gpg --export -a "$EMAIL"
  fi

  echo ""
  cat <<EOF
Probablemente quieras pegarla en sitios como github o gitlab:

  Github: https://github.com/settings/keys"
  Gitlab: https://gitlab.com/-/profile/gpg_keys"

EOF
fi

git config --local commit.gpgsign true
git config --local user.signingkey $FPR
git config --local user.email "$EMAIL"
